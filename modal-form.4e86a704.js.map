{"version":3,"sources":["js/modal-form.js"],"names":["refs","openModalBtn","document","querySelector","closeModalBtn","backdrop","onBackdropClick","event","target","currentTarget","toggleModal","classList","contains","window","removeEventListener","onPressEscape","addEventListener","toggle","code","modalRef","modalFocus","focus","style","outline","checkboxIconRef","checkboxInputRef","checkboxLabelRef","addEventListenerAddChecked","onPressEnterAdd","setAttribute","add","onPressEnterRemove","removeAttribute","remove","byClickChecked","hasAttribute","formModalRef","takeFormData","preventDefault","formRef","formInputArray","querySelectorAll","checked","forEach","input","borderColor","getAttribute","formData","FormData","submittedData","value","key","console","dir","log","modalInputArray","checkedInput","pattern","name","test","outlineColor","_","debounce"],"mappings":"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","file":"modal-form.4e86a704.js","sourceRoot":"..\\src","sourcesContent":["/* --------MODAL window open/close------------- */\r\n  const refs = {\r\n    openModalBtn: document.querySelector(\"[data-modal-open]\"),\r\n    closeModalBtn: document.querySelector(\"[data-modal-close]\"),\r\n    backdrop: document.querySelector(\"[data-backdrop]\"),\r\n  };\r\n\r\n  if (refs.openModalBtn) {\r\n      refs.openModalBtn.addEventListener(\"click\", toggleModal);\r\n      refs.closeModalBtn.addEventListener(\"click\", toggleModal);\r\n      refs.backdrop.addEventListener('click', onBackdropClick);\r\n  };\r\n\r\n  function onBackdropClick(event) {\r\n      if (event.target === event.currentTarget) {\r\n        toggleModal();\r\n      };\r\n  };\r\n\r\n  function toggleModal() {\r\n    !refs.backdrop.classList.contains(\"is-open\")\r\n      ? window.addEventListener('keydown', onPressEscape)\r\n      : window.removeEventListener('keydown', onPressEscape);\r\n    refs.backdrop.classList.toggle(\"is-open\");\r\n  };\r\n\r\n  function onPressEscape(event) {\r\n    if (event.code === 'Escape') {\r\n      toggleModal();\r\n    };\r\n  };\r\n\r\n/* add focus on modal */\r\n  const modalRef = document.querySelector('[data-modal]');\r\n\r\n  refs.openModalBtn.addEventListener('click', modalFocus);\r\n\r\n  function modalFocus() {\r\n    modalRef.focus();\r\n    modalRef.style.outline = 'none';\r\n  }\r\n\r\n/* CHECKBOX-icon in modal add attribute CHECKED */\r\n  const checkboxIconRef = document.querySelector('[data-checkbox-icon]');\r\n  const checkboxInputRef = document.querySelector('[data-checkbox-input]');\r\n  const checkboxLabelRef = document.querySelector('[data-checkbox-label]');\r\n\r\n\r\n  checkboxLabelRef.addEventListener('click', byClickChecked);\r\n  checkboxIconRef.addEventListener('focus', addEventListenerAddChecked());\r\n\r\n  function addEventListenerAddChecked() {\r\n    window.addEventListener('keydown', onPressEnterAdd);\r\n  };\r\n\r\n  function onPressEnterAdd(event) {\r\n      if ( event.target.classList.contains('checkbox-icon') && event.code === 'Enter') {\r\n        checkboxInputRef.setAttribute('checked', '');\r\n        checkboxIconRef.classList.add('checked');\r\n        window.removeEventListener('keydown', onPressEnterAdd);\r\n        window.addEventListener('keydown', onPressEnterRemove);\r\n      }\r\n  };\r\n\r\n  function onPressEnterRemove(event) {\r\n    if (event.target.classList.contains('checkbox-icon') && event.code === 'Enter') {\r\n      checkboxInputRef.removeAttribute('checked');\r\n      checkboxIconRef.classList.remove('checked');\r\n      window.removeEventListener('keydown', onPressEnterRemove);\r\n      addEventListenerAddChecked();\r\n    }\r\n  };\r\n\r\n  function byClickChecked(event) {\r\n    if (event.target.classList.contains('form__text-checkbox') ||\r\n        event.target.classList.contains('checkbox-icon')) {\r\n          if (checkboxInputRef.hasAttribute('checked')) {\r\n          checkboxInputRef.removeAttribute('checked');\r\n          checkboxIconRef.classList.remove('checked');\r\n          addEventListenerAddChecked();\r\n          } else {\r\n          checkboxInputRef.setAttribute('checked', '');\r\n          checkboxIconRef.classList.add('checked');\r\n          window.addEventListener('keydown', onPressEnterRemove);\r\n          };\r\n    };\r\n  };\r\n\r\n/* ========================================= */\r\n\r\n/* --------FORM in modal window------------- */\r\n  const formModalRef = document.querySelector('[data-form-modal]');\r\n\r\n  const takeFormData = event => {\r\n    event.preventDefault();//забороняє браузеру відправляти форму при натисканні кнопки\r\n    // console.dir(event.target.elements); //так можна отримати доступ до елементів форми\r\n    const formRef = event.target;// тут міститься посилання на форму\r\n    /* -------------- */\r\n    const formInputArray = formRef.querySelectorAll('input');\r\n    let checked = true;\r\n      formInputArray.forEach(input => {\r\n        if (!input.hasAttribute('checked')) {\r\n          input.style.borderColor = '#d41443';\r\n          if (input.getAttribute('type')==='checkbox') {\r\n            const checkboxIconRef = formRef.querySelector('.checkbox-icon');\r\n            checkboxIconRef.classList.add('border-not-checked');\r\n          };\r\n        checked = false;\r\n      }\r\n    });\r\n\r\n    if (!checked) {\r\n      console.log('not all inputs checked');\r\n      return;\r\n    };\r\n\r\n    /* -------------- */\r\n    const formData = new FormData(formRef);//створюємо новий об'єкт\r\n    const submittedData = {};//об'єкт для збору даних з форми, який надішлеться на бекенд\r\n\r\n    formData.forEach((value, key) => {//цей об'єкт просто має ф-цію форіч і дані інпутів у вигляді value та key = name інпута\r\n      submittedData[key] = value;//записуємо дані в об'єкт\r\n    });\r\n\r\n    console.dir(submittedData); //показує в консолі обєкт з даними\r\n    toggleModal();// закриває форму\r\n    formInputArray.forEach(input => {\r\n      input.value = '';\r\n      input.removeAttribute('checked');\r\n    });\r\n    /* --------видаляю все з чекбокса----------- */\r\n    checkboxIconRef.classList.remove('border-not-checked');\r\n    checkboxInputRef.removeAttribute('checked');\r\n    checkboxIconRef.classList.remove('checked');\r\n    window.removeEventListener('keydown', onPressEnterRemove);\r\n    addEventListenerAddChecked();\r\n    /* --------кінець видаляю все з чекбокса----------- */\r\n  };\r\n\r\n  if(formModalRef){\r\n    formModalRef.addEventListener('submit', takeFormData);\r\n  };\r\n/* --------------------- */\r\n/* ---------перевірка заповнення INPUT в модалці------------ */\r\nconst modalInputArray = document.querySelectorAll('[data-form-modal] input');\r\n\r\nconst checkedInput = (event) => {\r\n  let pattern;\r\n\r\n  if (event.target.name === \"name\") {\r\n    pattern = /^[a-zA-ZА-Яа-яЁё\\s]+$/;\r\n  }\r\n  if (event.target.name === \"tel\") {\r\n    pattern = /^[0-9]{9,12}(\\s*)?$/;\r\n  }\r\n  if (event.target.name === \"email\") {\r\n    pattern = /^([a-z0-9_\\.-])+@[a-z0-9-]+\\.([a-z]{2,4}\\.)?[a-z]{2,4}$/;\r\n  }\r\n\r\n  if (!pattern.test(event.target.value)) {\r\n    event.target.style.outlineColor = '#d41443';\r\n    event.target.removeAttribute('checked');\r\n    } else {\r\n    event.target.style.outlineColor = 'inherit';\r\n    event.target.style.borderColor = 'rgba(33, 33, 33, 0.2)';\r\n    event.target.setAttribute('checked', '');\r\n    }\r\n\r\n};\r\n\r\nmodalInputArray.forEach(input => input.addEventListener('input', _.debounce(checkedInput, 500)));"]}